# -*- coding: utf-8 -*-
"""데이터분석.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hKolZGdoztLAU3GYMtHb1btoyIcXRxjA

## Double and Nothing: Understanding and Detecting Cryptocurrency Giveaway Scams
"""

pip install ipwhois

from google.colab import drive
import pandas as pd
import matplotlib.pyplot as plt
from ipwhois import IPWhois
from ipwhois.asn import IPASN
import socket

drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/dan_dataset.csv')
df.columns = ['website', 'domain', 'ip_address', 'time_captured', 'last_active',
       'crypto_address', 'detected_crypto_type']

df[['website', 'domain', 'detected_crypto_type']].groupby(['detected_crypto_type']).nunique()#피봇테이블에 넣어줌.
#이걸 차트화 시킬 생각이다.

plt.hist(df['detected_crypto_type'], bins=5)
plt.xlabel('Detected Crypto Type')
plt.ylabel('Count')
plt.title('Histogram of Detected Crypto Types')
plt.show()

#비트코인별 캡처 현황
bitcoins = [' btc', ' eth', ' xrp', ' ada']

for bitcoin in bitcoins:
    bitcoin_df = df[df['detected_crypto_type'] == bitcoin]
    bitcoin_df['time_captured'] = pd.to_datetime(bitcoin_df['time_captured'])
    bitcoin_df['time_captured'] = bitcoin_df['time_captured'].apply(lambda x: x.strftime('%Y-%m'))
    capture_counts = bitcoin_df['time_captured'].value_counts().sort_index()
    plt.plot(capture_counts.index, capture_counts, label=bitcoin)

#plot chart 그리기
plt.xlabel('Year-Month')
plt.ylabel('Count')
plt.title('Capture Dates for Cryptocurrency Addresses')
plt.legend()
plt.xticks(rotation=45)
plt.show()

"""날짜별로 차트를 보니 이더리움이 한 시기에 눈에 띄게 탐지가 되었었다.
이때 이것이 단순히 이더리움의 급부상이라고 하기에는 이상해보여서 좀더 차트를 만들어 분석했었다.
"""

# 지갑주소 추출하여 count
counts = df.groupby('crypto_address')['website'].count()

# 상위 5개의 지갑 주소 추출
top_wallets = counts.nlargest(5)

# 히스토그램 그리기
plt.bar(top_wallets.index, top_wallets.values, width=0.3, color='b', align='center')
plt.xlabel('Crypto Addresses')
plt.xticks(rotation=90)
plt.ylabel('Number of Websites')
plt.title('Number of Websites for the Top 5 Crypto Addresses')
plt.show()

"""특정 비트코인의 지갑주소가 눈에 띄게 많이 나왔다. 이것이 eth코인일 것이라고 추측이 되었고. 관련하여  0xe6df55A2044825a55D3Cc23c5e10045FffA46CA3의 지갑주소를 분석하여 차트를 만들었다."""

# 주어진 crypto_address 필터링
filtered_df = df[df['crypto_address'] == ' 0xe6df55A2044825a55D3Cc23c5e10045FffA46CA3']
filtered_df.groupby(['detected_crypto_type']).nunique()

# 히스토그램 차트 작성
plt.hist(filtered_df['detected_crypto_type'], bins=len(filtered_df['detected_crypto_type'].unique()), color='blue', edgecolor='k', alpha=0.7)
plt.xlabel('Detected Crypto Type')
plt.ylabel('Frequency')
plt.title('Histogram of Detected Crypto Type for Given Crypto Address')
plt.show()

# 날짜 정보 추출하기
capture_dates = filtered_df['time_captured'].apply(lambda x: x[0:10])  # "YYYY-MM-DD hh:mm:ss"에서 "YYYY-MM-DD"만 추출
capture_counts = capture_dates.value_counts().sort_index()

# 그래프 그리기
plt.plot(capture_counts.index, capture_counts.values, '-ro')
plt.title('Detect count of 0xe6df55A2044825a55D3Cc23c5e10045FffA46CA3 by date')
plt.xlabel('Date')
plt.xticks(rotation=45)
plt.ylabel('Counts')
plt.show()

target_crypto_address = ' 0xe6df55A2044825a55D3Cc23c5e10045FffA46CA3'
filtered_df = df[df['crypto_address'] == target_crypto_address]
ip_addresses = filtered_df['ip_address']
ip_0xe6 = {}

for ip in ip_addresses:
    if ip in ip_0xe6:
        ip_0xe6[ip] += 1
    else:
        ip_0xe6[ip] = 1

ip_stats_df = pd.DataFrame(list(ip_0xe6.items()), columns=['IP', 'Frequency'])
ip_stats_df.sort_values(by=['Frequency'], ascending=False, inplace=True)
ip_stats_df.reset_index(drop=True, inplace=True)

# 통계 표 보여주기
display(ip_stats_df)

ip_country = {}

for ip, count in ip_0xe6.items():
    ip = ip.replace(" ", "")

    try:
        obj = IPWhois(ip)
        ip_info = obj.lookup_rdap()
        country = ip_info['network']['country']

        if country is None:
            ip_info = obj.lookup_rdap(depth=1, asn_methods=['whois', 'http'])
            country = ip_info['asn_country_code']

            if country is None:
                ipasn = IPASN(obj.rir)
                ip_info_asn = ipasn.lookup(ip)
                country = ip_info_asn['asn_country_code']

        ip_country[ip] = country
    except (ValueError, socket.error):
        ip_country[ip] = 'unknown'

print(ip_country)

# 0xe6df55A2044825a55D3Cc23c5e10045FffA46CA3 주소 제외하기
df = df[df['crypto_address'] != ' 0xe6df55A2044825a55D3Cc23c5e10045FffA46CA3']

#비트코인별 캡처 현황
bitcoins = [' btc', ' eth', ' xrp', ' ada']

for bitcoin in bitcoins:
    bitcoin_df = df[df['detected_crypto_type'] == bitcoin]
    bitcoin_df['time_captured'] = pd.to_datetime(bitcoin_df['time_captured'])
    bitcoin_df['time_captured'] = bitcoin_df['time_captured'].apply(lambda x: x.strftime('%Y-%m'))
    capture_counts = bitcoin_df['time_captured'].value_counts().sort_index()
    plt.plot(capture_counts.index, capture_counts, label=bitcoin)

#plot chart 그리기
plt.xlabel('Year-Month')
plt.ylabel('Count')
plt.title('Capture Dates for Cryptocurrency Addresses')
plt.legend()
plt.xticks(rotation=45)
plt.show()